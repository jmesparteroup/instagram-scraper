# Instagram Scraper API - Production Configuration

# Required: OpenAI API Key for content parsing
OPENAI_API_KEY=your_openai_api_key_here

# Required: Flask Secret Key (generate a secure random key)
SECRET_KEY=your-very-secure-secret-key-change-this-in-production

# Flask Environment
FLASK_ENV=production

# Redis Configuration (uses container networking)
REDIS_URL=redis://redis:6379/0

# Rate Limiting Configuration (conservative for production)
DEFAULT_RATE_LIMIT=5 per minute
SCRAPE_RATE_LIMIT=2 per minute

# Timeout Configuration (higher for production stability)
SCRAPE_TIMEOUT=90
OPENAI_TIMEOUT=45

# Logging Configuration (less verbose for production)
LOG_LEVEL=WARNING
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s

# Instagram Scraping Configuration (more retries for reliability)
INSTAGRAM_MAX_RETRIES=5
INSTAGRAM_RETRY_DELAY=3

# Production Notes:
# 1. Generate a secure SECRET_KEY: python -c "import secrets; print(secrets.token_hex(32))"
# 2. Consider using environment-specific rate limits
# 3. Monitor logs and adjust LOG_LEVEL as needed
# 4. Set up proper log rotation for production
# 5. Consider Redis authentication for additional security
